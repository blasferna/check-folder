name: Check Folder Structure

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-folder-structure:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Fetch all branches
      run: git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
    - name: Get PR files
      id: pr_files
      run: |
        PR_NUM=$(echo "${{ github.event.pull_request.number }}")
        PR_BRANCH=$(git branch --contains "refs/pull/${PR_NUM}/merge" | grep -v 'HEAD' | xargs)
        FILES=$(git diff --name-only "${PR_BRANCH}" "${{ github.event.pull_request.base.ref }}" | xargs)
        echo "::set-output name=files::${FILES}"
    - name: Check if folder structure is correct
      id: check
      run: |
        PR_USERNAME=$(echo "${{ github.event.pull_request.user.login }}")
        FILES_ARR=(${{ steps.pr_files.outputs.files }})
        
        for FILE in "${FILES_ARR[@]}"; do
          TEST_FOLDER=$(echo ${FILE} | cut -d'/' -f2)
          if [[ ${FILE} != pruebas/${TEST_FOLDER}/${PR_USERNAME}/* ]]; then
            echo "Incorrect folder structure in file: ${FILE}. Requesting changes."
            echo "AsegÃºrese de que los cambios se realicen en 'pruebas/${TEST_FOLDER}/${PR_USERNAME}/'. :file_folder:" > message.txt
            echo "::set-output name=comment::$(cat message.txt)"
            break
          fi
        done
      outputs:
        comment: ${{ steps.check.outputs.comment }}
    - name: Comment PR
      if: steps.check.outputs.comment != ''
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "${{ steps.check.outputs.comment }}"
          })
